/* 
Create a game where a player must correctly guess secret words to win.
The computer chooses a random word from a set of three words. 
Feel free to use whatever words you'd like, but we will be using the words "banana", "chisel", and "faucet".
To win the game the player must guess correctly twice in total; but is allowed to guess wrongly in between their two correct guesses.
For each guess, output all information such as the guessed word, the secret word, and how many correct guesses the player still needs until she wins.
*/

// Declare Global Variables
var correctGuessesToWin = 2;
var userNumWins = 0;

// User input either of the three words: Banana, Chisel, Faucet
// Randomize the words generated by the Computer

var generateSecretWord = function () {
  var numOfWords = 3;
  var randomInt = Math.floor(Math.random() * numOfWords) + 1;
  if (randomInt == 1) {
    return `banana`;
  }
  if (randomInt == 2) {
    return `chisel`;
  }
  if (randomInt == 3) {
    return `faucet`;
  }
};

// If user guessed a word correctly: Output 'You have guessed 1 time correctly.'
// If user guessed a word wrongly: Output 'Try Again'
// If user guessed correctly twice: Output `You win`

var secretWordBaseMain = function (userGuess) {
  var randomSecretWord = generateSecretWord();
  var myOutputValue = `You have guessed ${userGuess}. Secret word is ${randomSecretWord}.`;
  // Complete the Base: Secret Word exercise below with secretWordBaseMain as the main function.
  if (randomSecretWord == userGuess) {
    userNumWins += 1;
    if (userNumWins >= correctGuessesToWin) {
      // Reset the game as user has won the game
      userNumWins = 0;
      return `${myOutputValue}. You have guessed twice correctly. You won the game!`;
    }
    return `${myOutputValue}. You have guessed once correctly. You need 1 more correct guess to win.`;
  }
  var numCorrectGuessesRemaining = correctGuessesToWin - userNumWins;

  return `${myOutputValue}. You guessed incorrectly. You need ${numCorrectGuessesRemaining} more guesses to win the game.`;
};

/*
Update Secret Word with an additional rule: The player must guess correctly twice in a row to win.
*/

var secretWordTwiceRowMain = function (userGuess) {
  var randomSecretWord = generateSecretWord();
  var myOutputValue = `You have guessed ${userGuess}. Secret word is ${randomSecretWord}.`;
  // Complete the Base: Secret Word exercise below with secretWordBaseMain as the main function.
  if (randomSecretWord == userGuess) {
    userNumWins += 1;
    if (userNumWins >= correctGuessesToWin) {
      // Reset the game as user has won the game
      userNumWins = 0;
      return `${myOutputValue}. You have guessed twice correctly. You won the game!`;
    }
    var numCorrectGuessesRemaining = correctGuessesToWin - userNumWins;

    return `${myOutputValue}. You guessed correctly. You need ${numCorrectGuessesRemaining} more guesses to win the game.`;
  }
  userNumWins = 0;
  return `${myOutputValue}. You guessed incorrectly. You need ${correctGuessesToWin} more guesses to win the game.`;
};
// Complete the Comfortable: Secret Word Twice in a Row exercise below with secretWordTwiceRowMain as the main function.

/* Update Secret Word game such that the number of times the player needs to guess correctly in a row changes between rounds.
We define "round" as all gameplay until a player wins. The number of times the player needs to guess correctly is a number from 2 to 4, 
randomly chosen at the start of the round.
When the player wins, the computer updates the number of times the player needs to guess correctly in a row for the next round.
Consider using input control to test your logic. */

// startOfRound to generate numOfCorrectGuessesNeededtoWin at start of round.
var startOfRound = true;
//Declare Global Variables
var numCorrectGuessesNeededToWin = 0;
var numCorrectGuessesSoFar = 0;

var generateSecretWordX = function () {
  var numOfWords = 3;
  var randomInt = Math.floor(Math.random() * numOfWords) + 1;
  if (randomInt == 1) {
    return `banana`;
  }
  if (randomInt == 2) {
    return `chisel`;
  }
  if (randomInt == 3) {
    return `faucet`;
  }
};

// Generate random number between 2 to 4
var generateNumCorrectGuesses = function () {
  return Math.floor(Math.random() * 3) + 2;
};

var secretWordXRowMain = function (userGuessedWord) {
  // Complete the Comfortable: Secret Word X in a Row exercise below with secretWordXRowMain as the main function.
  // At start of round, re-generate number of correct guesses needed to win
  if (startOfRound) {
    numCorrectGuessesNeededToWin = generateNumCorrectGuesses();
  }
  startOfRound = false;
  var secretWord = generateSecretWordX();
  var message = `You guessed ${userGuessedWord}. Secret word is ${secretWord}`;
  // User Guessed Correctly
  if (secretWord == userGuessedWord) {
    numCorrectGuessesSoFar += 1;
    if (numCorrectGuessesSoFar >= numCorrectGuessesNeededToWin) {
      // Reset counter to reset the game
      numCorrectGuessesSoFar = 0;
      // Reset start of Round guesses to generate a new number of guesses
      startOfRound = true;
      return `${message}. You guessed correctly ${numCorrectGuessesNeededToWin} times in a row. You win. Please play again!`;
    }
    var numCorrectGuessesRemainingToWin =
      numCorrectGuessesNeededToWin - numCorrectGuessesSoFar;
    return `${message}. You guessed correctly! You need ${numCorrectGuessesRemainingToWin} more correct guess to win.`;
  }
  // Guess is incorrect
  // Reset counter of correct guesses to 0 to implement X in a row rule.
  numCorrectGuessesSoFar = 0;
  return `${message}. You guessed incorrectly. You need ${numCorrectGuessesNeededToWin} more correct guesses to win.`;
};

/*

Create a new version of our Coding Basics dice game (where the player guesses the dice roll) that randomly becomes easier or harder. 
At the beginning of the game and each time the player wins, the computer selects a random number from 1 to 3, which we call the "within number". 
If any of the player's guesses fall within the dice roll plus or minus the within number, the player wins.
For example: the app randomly chooses 3 as the within number. The player can guess within 3 of the dice roll to win the game. 
The player guesses 2 and the dice roll is 5. The guess is within 3 of the dice roll so the player wins the game. 
At this point, the computer adjusts the difficulty of the game by choosing a new within number.

*/

// Initialise start of round to generate a new Within Number at the start of the round
var diceStartOfRound = true;
// Declare Global Variables
var withinNum;

// Dice Roll Function
var rollDice = function () {
  var diceRoll = Math.floor(Math.random() * 6) + 1;
  return diceRoll;
};

// Generate a random number from 1 to 3 function
var generateWithinNumber = function () {
  var randomNum = Math.floor(Math.random() * 3) + 1;
  return randomNum;
};

var diceWithinMain = function (userGuess) {
  // Complete the More Comfortable: Dice Within exercise below with diceWithinMain as the main function.
  if (diceStartOfRound) {
    withinNum = generateWithinNumber();
    diceStartOfRound = false;
  }
  var diceNumber = rollDice();
  var myOutputValue = `You have rolled ${diceNumber}. Your guess is ${userGuess}. The number within is ${withinNum}.`;

  if (
    userGuess <= diceNumber + withinNum &&
    userGuess >= diceNumber - withinNum
  ) {
    diceStartOfRound = true;
    myOutputValue += ` You win!`;
  } else {
    myOutputValue += ` You lose!`;
  }
  return myOutputValue;
};

var diceWithin2DiceMain = function (input) {
  // Complete the More Comfortable: Dice Within with 2 Dice exercise below with diceWithin2DiceMain as the main function.
  var myOutputValue = "HELLO TEST";
  return myOutputValue;
};

var dice4DMain = function (input) {
  // Complete the More Comfortable: Dice 4D exercise below with dice4DeMain as the main function.
  var myOutputValue = "hello world";
  return myOutputValue;
};

var secretWordTwice2Main = function (input) {
  // Complete the More Comfortable: Secret Word Twice in a Row 2 exercise below with secretWordTwice2Main as the main function.
  var myOutputValue = "hello world";
  return myOutputValue;
};
